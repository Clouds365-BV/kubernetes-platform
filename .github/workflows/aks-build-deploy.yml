name: AKS Build and Deploy

on:
  workflow_call:
    inputs:
      project-dir:
        required: true
        type: string
        description: 'Directory of the project to build'
      k8s-dir:
        required: true
        type: string
        description: 'Directory of the Kubernetes manifests'
      image-name:
        required: true
        type: string
        description: 'Name of the Docker image'
      namespace:
        required: true
        type: string
        description: 'Kubernetes namespace to deploy to'
      deployment-name:
        required: true
        type: string
        description: 'Name of the Kubernetes deployment'
    secrets:
      ARM_TENANT_ID:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true

jobs:
  build-and-deploy:
    runs-on: self-hosted
    env:
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      PROJECT_DIR: ${{ inputs.project-dir }}
      K8S_DIR: ${{ inputs.k8s-dir }}
      IMAGE_NAME: ${{ inputs.image-name }}

    steps:
      - name: Select environment
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "selected-environment=prd" >> "$GITHUB_ENV"
            echo "k8s-environment=prod" >> "$GITHUB_ENV"
          else
            echo "selected-environment=dev" >> "$GITHUB_ENV"
            echo "k8s-environment=dev" >> "$GITHUB_ENV"
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install pipenv and generate requirements.txt
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          pip install pipenv
          pipenv install --dev
          pipenv requirements > requirements.txt
          echo "Generated requirements.txt for Docker build:"
          cat requirements.txt

      - name: Azure Login & Get AKS Credentials
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        run: |
          az login \
          --service-principal \
          --username $ARM_CLIENT_ID \
          --password $ARM_CLIENT_SECRET \
          --tenant $ARM_TENANT_ID
          
          az account set \
          --subscription $ARM_SUBSCRIPTION_ID
          
          az aks get-credentials \
          --resource-group drone-${{env.selected-environment}}-ne-rg \
          --name drone-${{env.selected-environment}}-ne-k8s \
          --overwrite-existing
          
          kubelogin convert-kubeconfig -l azurecli

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: ACR Login
        run: |
          ACR_NAME="drone${{env.selected-environment}}neacr"
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
          az acr login --name $ACR_NAME

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          context: "${{ env.PROJECT_DIR }}"
          push: true
          tags: "${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }},${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest"

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: 5.0.3

      - name: Update kustomization.yaml and deploy with Kustomize
        run: |
          # Update the image tag in the kustomization.yaml for the appropriate environment
          cd ${{ env.K8S_DIR }}/overlays/${{ env.k8s-environment }}
          kustomize edit set image ${{ env.IMAGE_NAME }}=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Deploy using kustomize
          kubectl create namespace ${{ inputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -
          kustomize build . | kubectl apply -f -
          
          # Verify deployment
          kubectl rollout status deployment/${{ inputs.deployment-name }} -n ${{ inputs.namespace }} --timeout=180s
